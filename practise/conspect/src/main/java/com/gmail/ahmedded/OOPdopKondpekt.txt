üìò –ö–û–ù–°–ü–ï–ö–¢ –ü–û –û–û–ü (–û–ë–™–ï–ö–¢–ù–û-–û–†–ò–ï–ù–¢–ò–†–û–í–ê–ù–ù–û–ú–£ –ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–Æ) –í JAVA
--  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å --
-- =====================================================================


-- =====================================================
-- üîπ 1. –ß–¢–û –¢–ê–ö–û–ï –û–û–ü
-- =====================================================

-- –û–û–ü (–û–±—ä–µ–∫—Ç–Ω–æ-–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ) ‚Äî –ø–æ–¥—Ö–æ–¥,
-- –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—Ç—Ä–æ–∏—Ç—Å—è –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏–π.

-- 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–∞:
--   1Ô∏è‚É£ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è
--   2Ô∏è‚É£ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
--   3Ô∏è‚É£ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
--   4Ô∏è‚É£ –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è

-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∞—Å—Ç–æ –≤–∫–ª—é—á–∞—é—Ç:
--   - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
--   - –ö–æ–º–ø–æ–∑–∏—Ü–∏—é
--   - –ê–Ω–æ–Ω–∏–º–Ω—ã–µ –∫–ª–∞—Å—Å—ã
--   - Record (Java 16+)


-- =====================================================
-- üîπ 2. –ò–ù–ö–ê–ü–°–£–õ–Ø–¶–ò–Ø
-- =====================================================

-- –°–æ–∫—Ä—ã—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
-- –î–æ—Å—Ç—É–ø –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã (–≥–µ—Ç—Ç–µ—Ä—ã –∏ —Å–µ—Ç—Ç–µ—Ä—ã).

class Person {
    private String name;   // –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() { return name; }  // –≥–µ—Ç—Ç–µ—Ä
    public void setName(String name) { this.name = name; }  // —Å–µ—Ç—Ç–µ—Ä

    public int getAge() { return age; }
    public void setAge(int age) {
        if (age > 0) this.age = age;
    }

    public void sayHello() {
        System.out.println("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç " + name);
    }
}


-- =====================================================
-- üîπ 3. –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï
-- =====================================================

-- –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–º—É –∫–ª–∞—Å—Å—É "–Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å" –ø–æ–ª—è –∏ –º–µ—Ç–æ–¥—ã –¥—Ä—É–≥–æ–≥–æ.
-- –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: extends

class Employee extends Person {
    private String position;

    public Employee(String name, int age, String position) {
        super(name, age); // –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        this.position = position;
    }

    @Override
    public void sayHello() {  // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
        System.out.println("–ü—Ä–∏–≤–µ—Ç! –Ø " + getName() + ", –¥–æ–ª–∂–Ω–æ—Å—Ç—å: " + position);
    }
}


-- =====================================================
-- üîπ 4. –ü–û–õ–ò–ú–û–†–§–ò–ó–ú
-- =====================================================

-- –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞.

Person p = new Employee("–ê–Ω–Ω–∞", 28, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫");
p.sayHello();  // –≤—ã–∑–æ–≤–µ—Ç—Å—è –º–µ—Ç–æ–¥ Employee, –∞ –Ω–µ Person


-- =====================================================
-- üîπ 5. –ê–ë–°–¢–†–ê–ö–¶–ò–Ø
-- =====================================================

-- –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –∑–∞–¥–∞—ë—Ç –æ–±—â—É—é –∏–¥–µ—é, –Ω–æ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.
-- –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: abstract

abstract class Animal {
    public abstract void makeSound();  // –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    public void sleep() {
        System.out.println("–ñ–∏–≤–æ—Ç–Ω–æ–µ —Å–ø–∏—Ç");
    }
}

class Cat extends Animal {
    @Override
    public void makeSound() {
        System.out.println("–ú—è—É!");
    }
}


-- =====================================================
-- üîπ 6. –ò–ù–¢–ï–†–§–ï–ô–°–´
-- =====================================================

-- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ‚Äî —ç—Ç–æ "–∫–æ–Ω—Ç—Ä–∞–∫—Ç" (–Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏).
-- –ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –µ–≥–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç, –æ–±—è–∑–∞–Ω —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—Å–µ –º–µ—Ç–æ–¥—ã.

interface Flyable {
    void fly();
}

class Bird implements Flyable {
    @Override
    public void fly() {
        System.out.println("–ü—Ç–∏—Ü–∞ –ª–µ—Ç–∏—Ç");
    }
}


-- =====================================================
-- üîπ 7. –ö–û–ú–ü–û–ó–ò–¶–ò–Ø
-- =====================================================

-- –û–¥–∏–Ω –∫–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞.
-- –≠—Ç–æ ‚Äú–∏–º–µ–µ—Ç‚Äù –æ—Ç–Ω–æ—à–µ–Ω–∏–µ (Car –∏–º–µ–µ—Ç Engine).

class Engine {
    private String type;

    public Engine(String type) { this.type = type; }

    public void start() {
        System.out.println("–î–≤–∏–≥–∞—Ç–µ–ª—å " + type + " –∑–∞–ø—É—â–µ–Ω");
    }
}

class Car {
    private Engine engine;

    public Car(Engine engine) { this.engine = engine; }

    public void start() {
        engine.start();
        System.out.println("–ú–∞—à–∏–Ω–∞ –ø–æ–µ—Ö–∞–ª–∞");
    }
}


-- =====================================================
-- üîπ 8. –ê–ù–û–ù–ò–ú–ù–´–ï –ö–õ–ê–°–°–´
-- =====================================================

-- –≠—Ç–æ –∫–ª–∞—Å—Å—ã –±–µ–∑ –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è ‚Äú–Ω–∞ –º–µ—Å—Ç–µ‚Äù.
-- –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–∞–¥–∞—á.

Runnable r = new Runnable() {
    @Override
    public void run() {
        System.out.println("–ê–Ω–æ–Ω–∏–º–Ω—ã–π –∫–ª–∞—Å—Å Runnable");
    }
};

r.run();


-- =====================================================
-- üîπ 9. RECORD (Java 16+)
-- =====================================================

-- Record ‚Äî —ç—Ç–æ –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (immutable).
-- –í—Å–µ –ø–æ–ª—è final, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –≥–µ—Ç—Ç–µ—Ä—ã, equals, hashCode, toString.

record Point(int x, int y) {}

Point p = new Point(10, 20);
System.out.println(p.x());  // 10
System.out.println(p.y());  // 20


-- =====================================================
-- üîπ 10. SOLID (5 –ü–†–ò–ù–¶–ò–ü–û–í)
-- =====================================================

-- S ‚Äî Single Responsibility  (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å)
--    ‚Üí –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–µ–ª–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ

-- O ‚Äî Open/Closed  (–æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è)
--    ‚Üí –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞

-- L ‚Äî Liskov Substitution  (–ø—Ä–∏–Ω—Ü–∏–ø –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ë–∞—Ä–±–∞—Ä—ã –õ–∏—Å–∫–æ–≤)
--    ‚Üí –ø–æ–¥–∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å

-- I ‚Äî Interface Segregation  (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)
--    ‚Üí –ª—É—á—à–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–ª–µ–Ω—å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, —á–µ–º –æ–¥–∏–Ω –±–æ–ª—å—à–æ–π

-- D ‚Äî Dependency Inversion  (–∏–Ω–≤–µ—Ä—Å–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
--    ‚Üí –∑–∞–≤–∏—Å—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π


-- =====================================================
-- üîπ 11. –û–û–ü –í –ü–†–ò–ú–ï–ù–ï–ù–ò–ò
-- =====================================================

-- ‚úÖ –ò–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è ‚Üí —Å–∫—Ä—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
-- ‚úÖ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Üí –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥
-- ‚úÖ –ü–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º ‚Üí —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
-- ‚úÖ –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è ‚Üí –≤—ã–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ

-- –í –∏—Ç–æ–≥–µ –∫–æ–¥ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è:
--   - —á–∏—Ç–∞–µ–º—ã–º
--   - —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º
--   - –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
